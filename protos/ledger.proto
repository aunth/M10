syntax = "proto3";

package m10.ledger;

message Transfer {
  bytes from_account = 1;
  bytes to_account = 2;
  uint64 amount = 3;
  bytes signature = 4;
  uint64 nonce = 5;
}

message Action {
  ActionType type = 1;
  uint64 timestamp = 2;
  bytes from = 3;
  bytes to = 4;
  uint64 sum = 5;

  enum ActionType {
    TRANSFER = 0;
    CREATE_ACCOUNT = 1;
    FREEZE_ACCOUNT = 2;
    UNFREEZE_ACCOUNT = 3;
  }
}

message GetHistoryRequest {
  bytes id = 1;
  uint64 limit = 2;
}

message GetHistoryResponse {
  repeated Action actions = 1;
}


message TransferError {
  Code code = 1;
  string message = 2;
  enum Code {
      UNKNOWN = 0;
      INSUFFICIENT_BALANCE = 1;
      FROZEN_ACCOUNT = 2;
      INVALID_SIGNATURE = 3;
      ACCOUNT_NOT_FOUND = 4;
      BALANCE_OVERFLOW = 5;
      INVALID_ADDRESS = 6;
    }
}

message TransferResult {
  TransferError error = 1;
}


message CreateAccountReq {
  string name = 1;
  uint64 balance = 2;
}

message GetAccountReq {
  bytes id = 1;
}

message Account {
  bytes id = 1;
  string name = 2;
  uint64 balance = 3;
  bool is_frozen = 4;
}

message FreezeAccountRequest {
  bytes id = 1;
}

message FreezeAccountResponse {
  bool success = 1;
  string message = 2;
}

message UnfreezeAccountRequest {
  bytes id = 1;
}

message UnfreezeAccountResponse {
  bool success = 1;
  string message = 2;
}

message CreateAccountResponse {
  Account account = 1;
  bytes private_key = 2;
}

service Ledger {
  rpc CreateAccount(CreateAccountReq) returns (CreateAccountResponse) {}
  rpc GetAccount(GetAccountReq) returns (Account) {}

  rpc CreateTransfer(Transfer) returns (TransferResult) {}
  rpc FreezeAccount(FreezeAccountRequest) returns (FreezeAccountResponse) {}
  rpc UnfreezeAccount(UnfreezeAccountRequest) returns (UnfreezeAccountResponse) {}
  rpc GetHistory(GetHistoryRequest) returns (GetHistoryResponse) {}
}
